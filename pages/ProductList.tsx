import React from "react";
import Head from "next/head";
import Navigator from "@/components/ProductList/Navigator";
import Product from "@/components/ProductList/Product";
import { SimpleGrid, Box, Pagination } from "@mantine/core";
import { SimpleProduct } from "@/type/type";
import { GetServerSideProps } from "next";
import { getProductsListFromCat } from "@/fetchMethod/products";
import { backgroundColor } from "@/type/const";
import { useState, useEffect } from "react";
import { useAppSelector } from "@/store/hooks";
import { selectSearchInfo } from "@/features/roleFeature/roleFeature";
import { search } from "@/fetchMethod/search";
import IndexMediaShow from "@/components/IndexMediaShow";
type Catagory = { href: string; title: string }[];

interface ProductListProps {
  level: string;
  categoryId: string;
}
function ProductList({ level, categoryId }: ProductListProps) {
  const [page, setPage] = useState(1);
  const [products, setProducts] = useState<SimpleProduct[]>([]);
  const [total, setTotal] = useState(1);
  const searchInfo = useAppSelector(selectSearchInfo);
  useEffect(() => {
    const fetchProducts = async () => {
      if (categoryId !== "-1") {
        const { productList, pageTotal } = await getProductsListFromCat(
          categoryId,
          page,
          8
        );
        console.log(pageTotal);
        setProducts(
          productList.map((item: SimpleProduct) => ({
            ...item,
            images: item.images.map((img) => process.env.BaseUrl + img),
          }))
        );
        setTotal(pageTotal);
      } else {
        const { productList, pagesCount } = await search(
          searchInfo.searchName,
          page
        );
        setProducts(
          productList.map((item: SimpleProduct) => ({
            ...item,
            images: item.images.map((img) => process.env.BaseUrl + img),
          }))
        );
        setTotal(pagesCount);
      }
    };
    fetchProducts();
  }, [page, categoryId]);
  return (
    <>
      <Head>
        <title>VL Product</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Box sx={{ backgroundColor }}>
        <Navigator level={Number(level)} />
        <IndexMediaShow
          mediaUrl={{ des: "/productList.mp4", mo: "/productListM.mp4" }}
          height={{ desh: 800, moh: 350 }}
          type={"video"}
          text={"Coussins"}
          btnlist={[]}
          shadow={false}
        />
        <SimpleGrid
          cols={4}
          spacing={0}
          breakpoints={[
            { maxWidth: "62rem", cols: 3 },
            { maxWidth: "48rem", cols: 2 },
            { maxWidth: "36rem", cols: 1 },
          ]}
          sx={{ marginTop: "2rem" }}
        >
          {products.map((item) => (
            <Product product={item} key={item.productId} />
          ))}
        </SimpleGrid>
        <Box
          sx={{ padding: "5rem 0", display: "flex", justifyContent: "center" }}
        >
          <Pagination
            total={total}
            boundaries={3}
            defaultValue={1}
            color="dark"
            value={page}
            onChange={setPage}
          />
        </Box>
      </Box>
    </>
  );
}

export default ProductList;

export const getServerSideProps: GetServerSideProps<ProductListProps> = async (
  context
) => {
  let { categoryId, level } = context.query;
  console.log("category:", categoryId);
  if (!categoryId) {
    categoryId = "";
  }
  if (!level) {
    level = "0";
  }

  categoryId = categoryId as string;
  level = level as string;
  // let pt;
  // if (categoryId && categoryId !== "-1") {
  //   const { productList, pageTotal } = await getProductsListFromCat(categoryId_, 1, 8);
  //   pt = pageTotal;
  //   productsList = productList.map(
  //     (item: {
  //       images: string[];
  //       productId: string;
  //       color: string;
  //       price: string;
  //       name: string;
  //       productNo: string;
  //     }) => ({
  //       ...item,
  //       images: item.images.map((img) => process.env.BaseUrl + img),
  //     })
  //   );
  // } else if (productIds) {
  //   productsList = await Promise.all(
  //     productIds_.map((item) => {
  //       return getProductDetail(item).then((product) => product.product);
  //     })
  //   );
  // } else {
  //   console.log("not found");
  //   productsList = [];
  // }

  // // console.log(productsList);
  // const mylevel = Number(level);
  return {
    props: {
      level,
      categoryId,
      // products: productsList.map(
      //   (item: {
      //     images: string[];
      //     productId: string;
      //     color: string;
      //     price: string;
      //     name: string;
      //     productNo: string;
      //   }) => ({
      //     images: item.images,
      //     name: item.name,
      //     price: item.price,
      //     color: item.color,
      //     productId: item.productId,
      //     productNo: item.productNo,
      //   })
      // ),
    },
  };
};

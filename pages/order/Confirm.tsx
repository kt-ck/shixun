import React from "react";
import {
  Title,
  Box,
  Group,
  Stack,
  Text,
  Divider,
  Button,
  Flex,
  Select,
  Input,
} from "@mantine/core";
import { useAppSelector } from "@/store/hooks";
import Link from "next/link";
import ProductCard from "@/components/order/ProductCard";
import ServiceCard from "@/components/Product/ServiceCard";
import Head from "next/head";
import {
  AlertCircle,
  AlignBoxBottomLeft,
  Car,
  Recycle,
} from "tabler-icons-react";
import { gray_layout } from "@/type/const";
import { useStyles } from "@/styles/order";
import { useRouter } from "next/router";
import { createOrder, getStoreList, pay } from "../../fetchMethod/order";
import { useState, useEffect } from "react";
import { getAddress } from "@/fetchMethod/account";
import { useAppDispatch } from "@/store/hooks";
import { clearCart } from "@/features/roleFeature/roleFeature";
const services = [
  {
    title: "PAYMENT INFORMATION",
    icon: AlignBoxBottomLeft,
    desc: `Payments can be made by credit or debit card, or bank transfer for purchases made over the phone through Client Services. Accepted credit cards are Visa, American Express and Mastercard.

    When placing an order, your billing address must correspond to the address of your credit card, or we will not be able to process your order.
    
    All transactions are secured. The Louis Vuitton website is provided with an SSL encryption system to protect personal and payment data.
    
    If you require further information or assistance, please contact Client Services.`,
  },
  {
    title: "DELIVERY DETAILS",
    icon: Car,
    desc: `Receive your order in a Louis Vuitton shopping bag, hand-delivered by one of our delivery ambassadors to your doorstep.

    Same Day: Order before 12 pm for delivery between 4 – 9pm
    Next Day: Order before 5pm (Four timeslots: 9am – 12pm, 12 – 3pm, 3 – 6pm, 6 – 9pm)
    
    Standard Shipping: estimated 7 – 14 working days
    
    Collect in Store – Ngee Ann City, Ion or Marina Bay Sands store: Order is available for collection 1 day after your order is confirmed. You will receive a SMS once your order is ready for collection`,
  },
  {
    title: "EXCHANG & RETURN",
    icon: Recycle,
    desc: `All customised items (hot stamped, engraving, My LV Heritage, My LV World Tour, etc.) are final sale and not exchangeable.
    - Watches and Fine Jewellery may be exchanged for another product in the same category. When returning Watches or Fine Jewellery please include the product in its original packaging, instructional leaflet, warranty and product certificates such as COSC and GIA (when applicable), along with the invoice or gift receipt.
    - Fragrances are flammable goods and are subject to laws and regulations that regulate their transportation. Please contact our Client Services Team before returning any fragrance to help you with return or exchange of your Louis Vuitton fragrance. All returns and exchanges of fragrances for change of mind must be in their original packaging (white box wrapped in cellophane), unopened and in sealed condition. If you do not return your fragrance purchases in accordance with our instructions you risk your purchases being confiscated by the state, federal and international authorities that govern the safe and legal transportation of fragrances.`,
  },
];

function Confirm() {
  const products = useAppSelector((state) => state.role.cart.products);
  const { classes, theme } = useStyles();
  const [deliveryWay, setDeliveryWay] = useState("0");
  const router = useRouter();
  const [stores, setStores] = useState([]);
  const [selectStore, setSelectStore] = useState("");
  // const [address, setAddress] = useState("");
  const [selectAddress, setSeleteAddress] = useState("");
  const [ads, setAds] = useState([]);
  const dispatch = useAppDispatch();
  useEffect(() => {
    getStoreList(1).then((res) => {
      setStores(
        res?.storeList.map((item: { storeName: string; storeId: string }) => ({
          label: item.storeName,
          value: item.storeId,
        }))
      );
    });

    getAddress(1).then((res) => {
      setAds(
        res.map(
          (item: {
            address: string;
            phoneNumber: string;
            recName: string;
            recAddressId: string;
          }) => ({
            label: `${item.address}/${item.phoneNumber}/${item.recName}`,
            value: item.recAddressId,
          })
        )
      );
    });
  }, []);
  return (
    <>
      <Head>
        <title>Comfirm Order</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Flex className={classes.container}>
        <Box className={classes.cart}>
          <Group>
            <Title order={1} fw={400} className={classes.header}>
              {`MY SHOPPING BAG(${products.length})`}
            </Title>
            <Link
              href={"/"}
              style={{
                marginLeft: "auto",
                color: theme.colorScheme === "light" ? "black" : "white",
              }}
            >
              {" "}
              Continue Shopping
            </Link>
          </Group>
          <Stack sx={{ marginTop: "2rem", gap: "1rem" }}>
            {products.map((item) => (
              <ProductCard item={item} key={item.name} />
            ))}
          </Stack>
        </Box>
        <Box className={classes.pricePanel}>
          <Stack className={classes.priceContent}>
            <Group>
              <Title order={3} fw={500}>
                Quantity
              </Title>
              <Text sx={{ marginLeft: "auto" }} size={"xl"} fw={600}>
                {products.reduce((prev, cur) => prev + cur.count, 0)}
              </Text>
            </Group>
            <Group>
              <Title order={3} fw={500}>
                Total
              </Title>
              <Text sx={{ marginLeft: "auto" }} size={"xl"} fw={600}>
                $
                {products.reduce(
                  (prev, cur) => prev + cur.count * cur.price,
                  0
                )}
              </Text>
            </Group>
            <Select
              label="Pick Up One Delivery Way"
              placeholder="Pick one"
              data={[
                { value: "0", label: "In-store Pickup" },
                { value: "1", label: "Express Delivery" },
              ]}
              value={deliveryWay}
              onChange={(v: string) => setDeliveryWay(v)}
            />
            {deliveryWay === "0" ? (
              <Select
                label="All Store Availiable"
                placeholder="Pick one"
                data={stores}
                value={selectStore}
                onChange={(v: string) => setSelectStore(v)}
              />
            ) : (
              <Select
                label="Pick Up One Address"
                placeholder="Pick one(Address/Phone Number/Name)"
                data={ads}
                value={selectAddress}
                onChange={(v: string) => setSeleteAddress(v)}
              />
            )}
            <Button
              color={theme.colorScheme === "light" ? "dark" : "gray"}
              onClick={() => {
                let w = 1 - Number(deliveryWay);
                console.log(deliveryWay, selectStore, selectAddress);
                createOrder(w, selectStore, selectAddress).then((id) => {
                  // router.push(
                  //    process.env.BaseUrl + `/order/toPay?orderId=${id}`
                  // );
                  const url =
                    process.env.BaseUrl + `/order/toPay?orderId=${id}`;
                  const newWindow = window.open(
                    url,
                    "_blank",
                    "noopener,noreferrer"
                  );
                  if (newWindow) newWindow.opener = null;
                  dispatch(clearCart());
                  pay(id)
                });
              }}
            >
              Pay
            </Button>
          </Stack>
          <Divider />
          {services.map((item, index) => (
            <Box
              sx={{
                borderTop: index === 0 ? "none" : `1px solid ${gray_layout}`,
                maxWidth: "30rem",
              }}
              key={item.title}
            >
              <ServiceCard service={item} index={0} />
            </Box>
          ))}
        </Box>
      </Flex>
    </>
  );
}

export default Confirm;
